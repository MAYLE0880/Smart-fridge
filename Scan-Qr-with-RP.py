import cv2
import json
import pymysql
from pyzbar import pyzbar
import datetime
from playsound import playsound
import time


DB_CONFIG = {
    "host": "194.87.243.9",
    "user": "lev",
    "password": "15421542",
    "database": "fridge_management",
    "charset": "utf8mb4"
}

def days_until_expiration(expiration_date):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏.
    """
    if isinstance(expiration_date, datetime.datetime):
        expiration_date = expiration_date.date()
    elif isinstance(expiration_date, datetime.date):
        expiration_date = expiration_date.strftime("%Y-%m-%d")
    elif not expiration_date:
        return None

    today = datetime.date.today()
    exp_date = datetime.datetime.strptime(expiration_date, "%Y-%m-%d").date()
    return (exp_date - today).days

def check_product_in_db(product_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        conn = pymysql.connect(**DB_CONFIG)
        cursor = conn.cursor(pymysql.cursors.DictCursor)

        sql = "SELECT * FROM products WHERE product_name = %s LIMIT 1;"
        cursor.execute(sql, (product_name,))
        product = cursor.fetchone()

        cursor.close()
        conn.close()
        return product
    except pymysql.MySQLError as err:
        print("–û—à–∏–±–∫–∞ MySQL:", err)
        return None

def delete_product_from_db(product_name):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        conn = pymysql.connect(**DB_CONFIG)
        cursor = conn.cursor()
        sql = "DELETE FROM products WHERE product_name = %s;"
        cursor.execute(sql, (product_name,))
        conn.commit()
        cursor.close()
        conn.close()
        print(f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except pymysql.MySQLError as err:
        print("–û—à–∏–±–∫–∞ MySQL:", err)

def insert_product(product_info):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É products —Å –ø–æ–º–æ—â—å—é pymysql.
    """
    product_name = product_info.get("name")


    existing_product = check_product_in_db(product_name)
    if existing_product:
        print(f"\n–ü—Ä–æ–¥—É–∫—Ç '{product_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ (1) –∏–ª–∏ –£–¥–∞–ª–∏—Ç—å (2): ")

        if choice == "1":
            days_left = days_until_expiration(existing_product["expiration_date"])
            print("\nüìã **–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ:**")
            print(f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {existing_product['product_name']}")
            print(f"- –¢–∏–ø: {existing_product['product_type']}")
            print(f"- –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {days_left if days_left is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"- –ê–ª–ª–µ—Ä–≥–µ–Ω—ã: {existing_product['allergens'] if existing_product['allergens'] else '–ù–µ—Ç'}")
        elif choice == "2":
            delete_product_from_db(product_name)
        return


    try:
        conn = pymysql.connect(**DB_CONFIG)
        cursor = conn.cursor()
        sql = """
        INSERT INTO products (
            product_name,
            product_type,
            production_date,
            expiration_date,
            quantity,
            measurement_unit,
            measurement_type,
            nutritional_value,
            allergens
        )
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);
        """
        values = (
            product_info.get("name"),
            product_info.get("type"),
            product_info.get("production_date"),
            product_info.get("expiration_date"),
            product_info.get("quantity"),
            product_info.get("measurement_unit"),
            product_info.get("measurement_type"),
            product_info.get("nutritional_value"),
            product_info.get("allergens")
        )
        cursor.execute(sql, values)
        conn.commit()
        print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
        playsound(r'C:\Users\exam\Downloads\puk.mp3')  # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        time.sleep(2.5)
    except pymysql.MySQLError as err:
        print("–û—à–∏–±–∫–∞ MySQL:", err)
    finally:
        cursor.close()
        conn.close()


def scan_qr_and_save():
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏,
    —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç QR-–∫–æ–¥, –ø–∞—Ä—Å–∏—Ç –∫–∞–∫ JSON –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î.
    –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ 'q' –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    cap = cv2.VideoCapture(1)
    if not cap.isOpened():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É.")
        return

    print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ 'q'.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã.")
            break

        decoded_objects = pyzbar.decode(frame)
        for obj in decoded_objects:
            qr_data = obj.data.decode('utf-8', errors='replace')
            print("QR-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω:", qr_data)

            try:
                product_info = json.loads(qr_data)
                insert_product(product_info)
            except json.JSONDecodeError:
                print("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤ QR –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.")


        cv2.imshow("QR Scanner", frame)


        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

def main():
    scan_qr_and_save()

if __name__ == "__main__":
    main()
